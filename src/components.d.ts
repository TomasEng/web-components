/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { LabelPlacement } from "./types/LabelPlacement";
import { ComponentHue } from "./types/ComponentHue";
import { ButtonAttributes } from "./types/HTMLAttributes";
import { VNode } from "@stencil/core";
import { TDropdownMenuItem } from "./components/t-dropdown/TDropdownMenuItem";
import { TSelectOption } from "./components/t-select/TSelectOption";
export { LabelPlacement } from "./types/LabelPlacement";
export { ComponentHue } from "./types/ComponentHue";
export { ButtonAttributes } from "./types/HTMLAttributes";
export { VNode } from "@stencil/core";
export { TDropdownMenuItem } from "./components/t-dropdown/TDropdownMenuItem";
export { TSelectOption } from "./components/t-select/TSelectOption";
export namespace Components {
    interface InternalInputWrapper {
        "labelPlacement": LabelPlacement;
    }
    interface InternalStyleProvider {
        "hueOffsetInTurns": number;
    }
    interface PageHome {
    }
    interface TButton {
        "buttonAttributes": ButtonAttributes;
        "hue": ComponentHue;
    }
    interface TColumn {
    }
    interface TContext {
        "baseChroma": number;
        "baseHue": number;
    }
    interface TDropdownMenu {
        "buttonAttributes": ButtonAttributes;
        "hue": ComponentHue;
        "icon"?: VNode;
        "items": TDropdownMenuItem[];
        "label": VNode | string;
        "value": string;
    }
    interface THeading {
        "level": 1 | 2 | 3 | 4 | 5 | 6;
    }
    interface THuePicker {
        "label": string;
        "value": number;
    }
    interface TIntegerPicker {
        "hue": ComponentHue;
        "label": string;
        "max": number;
        "min": number;
        "value": number;
    }
    interface TLayout {
    }
    interface TLayoutHeader {
        "siteTitle": string;
    }
    interface TLayoutMain {
    }
    interface TModePicker {
        "hue": ComponentHue;
        "systemSelected": boolean;
    }
    interface TRow {
    }
    interface TSaturationPicker {
        "label": string;
        "value": number;
    }
    interface TSelect {
        "hue": ComponentHue;
        "label": string;
        "labelPlacement": LabelPlacement;
        "options": TSelectOption[];
        "value": string;
    }
    interface TSlider {
        "label": string;
        "max": number;
        "min": number;
        "step": number;
        "value": number;
    }
    interface TSwitch {
        "checked": boolean;
        "hue": number;
    }
    interface TTextfield {
        "hue": ComponentHue;
        "label": string;
        "value": string;
    }
}
export interface THuePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTHuePickerElement;
}
export interface TIntegerPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTIntegerPickerElement;
}
export interface TSaturationPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTSaturationPickerElement;
}
export interface TSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTSliderElement;
}
export interface TSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTSwitchElement;
}
declare global {
    interface HTMLInternalInputWrapperElement extends Components.InternalInputWrapper, HTMLStencilElement {
    }
    var HTMLInternalInputWrapperElement: {
        prototype: HTMLInternalInputWrapperElement;
        new (): HTMLInternalInputWrapperElement;
    };
    interface HTMLInternalStyleProviderElement extends Components.InternalStyleProvider, HTMLStencilElement {
    }
    var HTMLInternalStyleProviderElement: {
        prototype: HTMLInternalStyleProviderElement;
        new (): HTMLInternalStyleProviderElement;
    };
    interface HTMLPageHomeElement extends Components.PageHome, HTMLStencilElement {
    }
    var HTMLPageHomeElement: {
        prototype: HTMLPageHomeElement;
        new (): HTMLPageHomeElement;
    };
    interface HTMLTButtonElement extends Components.TButton, HTMLStencilElement {
    }
    var HTMLTButtonElement: {
        prototype: HTMLTButtonElement;
        new (): HTMLTButtonElement;
    };
    interface HTMLTColumnElement extends Components.TColumn, HTMLStencilElement {
    }
    var HTMLTColumnElement: {
        prototype: HTMLTColumnElement;
        new (): HTMLTColumnElement;
    };
    interface HTMLTContextElement extends Components.TContext, HTMLStencilElement {
    }
    var HTMLTContextElement: {
        prototype: HTMLTContextElement;
        new (): HTMLTContextElement;
    };
    interface HTMLTDropdownMenuElement extends Components.TDropdownMenu, HTMLStencilElement {
    }
    var HTMLTDropdownMenuElement: {
        prototype: HTMLTDropdownMenuElement;
        new (): HTMLTDropdownMenuElement;
    };
    interface HTMLTHeadingElement extends Components.THeading, HTMLStencilElement {
    }
    var HTMLTHeadingElement: {
        prototype: HTMLTHeadingElement;
        new (): HTMLTHeadingElement;
    };
    interface HTMLTHuePickerElementEventMap {
        "hueChange": number;
    }
    interface HTMLTHuePickerElement extends Components.THuePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTHuePickerElementEventMap>(type: K, listener: (this: HTMLTHuePickerElement, ev: THuePickerCustomEvent<HTMLTHuePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTHuePickerElementEventMap>(type: K, listener: (this: HTMLTHuePickerElement, ev: THuePickerCustomEvent<HTMLTHuePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTHuePickerElement: {
        prototype: HTMLTHuePickerElement;
        new (): HTMLTHuePickerElement;
    };
    interface HTMLTIntegerPickerElementEventMap {
        "integerChange": number;
    }
    interface HTMLTIntegerPickerElement extends Components.TIntegerPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTIntegerPickerElementEventMap>(type: K, listener: (this: HTMLTIntegerPickerElement, ev: TIntegerPickerCustomEvent<HTMLTIntegerPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTIntegerPickerElementEventMap>(type: K, listener: (this: HTMLTIntegerPickerElement, ev: TIntegerPickerCustomEvent<HTMLTIntegerPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTIntegerPickerElement: {
        prototype: HTMLTIntegerPickerElement;
        new (): HTMLTIntegerPickerElement;
    };
    interface HTMLTLayoutElement extends Components.TLayout, HTMLStencilElement {
    }
    var HTMLTLayoutElement: {
        prototype: HTMLTLayoutElement;
        new (): HTMLTLayoutElement;
    };
    interface HTMLTLayoutHeaderElement extends Components.TLayoutHeader, HTMLStencilElement {
    }
    var HTMLTLayoutHeaderElement: {
        prototype: HTMLTLayoutHeaderElement;
        new (): HTMLTLayoutHeaderElement;
    };
    interface HTMLTLayoutMainElement extends Components.TLayoutMain, HTMLStencilElement {
    }
    var HTMLTLayoutMainElement: {
        prototype: HTMLTLayoutMainElement;
        new (): HTMLTLayoutMainElement;
    };
    interface HTMLTModePickerElement extends Components.TModePicker, HTMLStencilElement {
    }
    var HTMLTModePickerElement: {
        prototype: HTMLTModePickerElement;
        new (): HTMLTModePickerElement;
    };
    interface HTMLTRowElement extends Components.TRow, HTMLStencilElement {
    }
    var HTMLTRowElement: {
        prototype: HTMLTRowElement;
        new (): HTMLTRowElement;
    };
    interface HTMLTSaturationPickerElementEventMap {
        "saturationChange": number;
    }
    interface HTMLTSaturationPickerElement extends Components.TSaturationPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTSaturationPickerElementEventMap>(type: K, listener: (this: HTMLTSaturationPickerElement, ev: TSaturationPickerCustomEvent<HTMLTSaturationPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTSaturationPickerElementEventMap>(type: K, listener: (this: HTMLTSaturationPickerElement, ev: TSaturationPickerCustomEvent<HTMLTSaturationPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTSaturationPickerElement: {
        prototype: HTMLTSaturationPickerElement;
        new (): HTMLTSaturationPickerElement;
    };
    interface HTMLTSelectElement extends Components.TSelect, HTMLStencilElement {
    }
    var HTMLTSelectElement: {
        prototype: HTMLTSelectElement;
        new (): HTMLTSelectElement;
    };
    interface HTMLTSliderElementEventMap {
        "sliderChange": number;
    }
    interface HTMLTSliderElement extends Components.TSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTSliderElementEventMap>(type: K, listener: (this: HTMLTSliderElement, ev: TSliderCustomEvent<HTMLTSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTSliderElementEventMap>(type: K, listener: (this: HTMLTSliderElement, ev: TSliderCustomEvent<HTMLTSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTSliderElement: {
        prototype: HTMLTSliderElement;
        new (): HTMLTSliderElement;
    };
    interface HTMLTSwitchElementEventMap {
        "switch": boolean;
    }
    interface HTMLTSwitchElement extends Components.TSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTSwitchElementEventMap>(type: K, listener: (this: HTMLTSwitchElement, ev: TSwitchCustomEvent<HTMLTSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTSwitchElementEventMap>(type: K, listener: (this: HTMLTSwitchElement, ev: TSwitchCustomEvent<HTMLTSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTSwitchElement: {
        prototype: HTMLTSwitchElement;
        new (): HTMLTSwitchElement;
    };
    interface HTMLTTextfieldElement extends Components.TTextfield, HTMLStencilElement {
    }
    var HTMLTTextfieldElement: {
        prototype: HTMLTTextfieldElement;
        new (): HTMLTTextfieldElement;
    };
    interface HTMLElementTagNameMap {
        "internal-input-wrapper": HTMLInternalInputWrapperElement;
        "internal-style-provider": HTMLInternalStyleProviderElement;
        "page-home": HTMLPageHomeElement;
        "t-button": HTMLTButtonElement;
        "t-column": HTMLTColumnElement;
        "t-context": HTMLTContextElement;
        "t-dropdown-menu": HTMLTDropdownMenuElement;
        "t-heading": HTMLTHeadingElement;
        "t-hue-picker": HTMLTHuePickerElement;
        "t-integer-picker": HTMLTIntegerPickerElement;
        "t-layout": HTMLTLayoutElement;
        "t-layout-header": HTMLTLayoutHeaderElement;
        "t-layout-main": HTMLTLayoutMainElement;
        "t-mode-picker": HTMLTModePickerElement;
        "t-row": HTMLTRowElement;
        "t-saturation-picker": HTMLTSaturationPickerElement;
        "t-select": HTMLTSelectElement;
        "t-slider": HTMLTSliderElement;
        "t-switch": HTMLTSwitchElement;
        "t-textfield": HTMLTTextfieldElement;
    }
}
declare namespace LocalJSX {
    interface InternalInputWrapper {
        "labelPlacement"?: LabelPlacement;
    }
    interface InternalStyleProvider {
        "hueOffsetInTurns"?: number;
    }
    interface PageHome {
    }
    interface TButton {
        "buttonAttributes"?: ButtonAttributes;
        "hue"?: ComponentHue;
    }
    interface TColumn {
    }
    interface TContext {
        "baseChroma"?: number;
        "baseHue"?: number;
    }
    interface TDropdownMenu {
        "buttonAttributes"?: ButtonAttributes;
        "hue"?: ComponentHue;
        "icon"?: VNode;
        "items"?: TDropdownMenuItem[];
        "label"?: VNode | string;
        "value"?: string;
    }
    interface THeading {
        "level"?: 1 | 2 | 3 | 4 | 5 | 6;
    }
    interface THuePicker {
        "label"?: string;
        "onHueChange"?: (event: THuePickerCustomEvent<number>) => void;
        "value"?: number;
    }
    interface TIntegerPicker {
        "hue"?: ComponentHue;
        "label"?: string;
        "max"?: number;
        "min"?: number;
        "onIntegerChange"?: (event: TIntegerPickerCustomEvent<number>) => void;
        "value"?: number;
    }
    interface TLayout {
    }
    interface TLayoutHeader {
        "siteTitle"?: string;
    }
    interface TLayoutMain {
    }
    interface TModePicker {
        "hue"?: ComponentHue;
        "systemSelected"?: boolean;
    }
    interface TRow {
    }
    interface TSaturationPicker {
        "label"?: string;
        "onSaturationChange"?: (event: TSaturationPickerCustomEvent<number>) => void;
        "value"?: number;
    }
    interface TSelect {
        "hue"?: ComponentHue;
        "label"?: string;
        "labelPlacement"?: LabelPlacement;
        "options"?: TSelectOption[];
        "value"?: string;
    }
    interface TSlider {
        "label"?: string;
        "max"?: number;
        "min"?: number;
        "onSliderChange"?: (event: TSliderCustomEvent<number>) => void;
        "step"?: number;
        "value"?: number;
    }
    interface TSwitch {
        "checked"?: boolean;
        "hue"?: number;
        "onSwitch"?: (event: TSwitchCustomEvent<boolean>) => void;
    }
    interface TTextfield {
        "hue"?: ComponentHue;
        "label"?: string;
        "value"?: string;
    }
    interface IntrinsicElements {
        "internal-input-wrapper": InternalInputWrapper;
        "internal-style-provider": InternalStyleProvider;
        "page-home": PageHome;
        "t-button": TButton;
        "t-column": TColumn;
        "t-context": TContext;
        "t-dropdown-menu": TDropdownMenu;
        "t-heading": THeading;
        "t-hue-picker": THuePicker;
        "t-integer-picker": TIntegerPicker;
        "t-layout": TLayout;
        "t-layout-header": TLayoutHeader;
        "t-layout-main": TLayoutMain;
        "t-mode-picker": TModePicker;
        "t-row": TRow;
        "t-saturation-picker": TSaturationPicker;
        "t-select": TSelect;
        "t-slider": TSlider;
        "t-switch": TSwitch;
        "t-textfield": TTextfield;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "internal-input-wrapper": LocalJSX.InternalInputWrapper & JSXBase.HTMLAttributes<HTMLInternalInputWrapperElement>;
            "internal-style-provider": LocalJSX.InternalStyleProvider & JSXBase.HTMLAttributes<HTMLInternalStyleProviderElement>;
            "page-home": LocalJSX.PageHome & JSXBase.HTMLAttributes<HTMLPageHomeElement>;
            "t-button": LocalJSX.TButton & JSXBase.HTMLAttributes<HTMLTButtonElement>;
            "t-column": LocalJSX.TColumn & JSXBase.HTMLAttributes<HTMLTColumnElement>;
            "t-context": LocalJSX.TContext & JSXBase.HTMLAttributes<HTMLTContextElement>;
            "t-dropdown-menu": LocalJSX.TDropdownMenu & JSXBase.HTMLAttributes<HTMLTDropdownMenuElement>;
            "t-heading": LocalJSX.THeading & JSXBase.HTMLAttributes<HTMLTHeadingElement>;
            "t-hue-picker": LocalJSX.THuePicker & JSXBase.HTMLAttributes<HTMLTHuePickerElement>;
            "t-integer-picker": LocalJSX.TIntegerPicker & JSXBase.HTMLAttributes<HTMLTIntegerPickerElement>;
            "t-layout": LocalJSX.TLayout & JSXBase.HTMLAttributes<HTMLTLayoutElement>;
            "t-layout-header": LocalJSX.TLayoutHeader & JSXBase.HTMLAttributes<HTMLTLayoutHeaderElement>;
            "t-layout-main": LocalJSX.TLayoutMain & JSXBase.HTMLAttributes<HTMLTLayoutMainElement>;
            "t-mode-picker": LocalJSX.TModePicker & JSXBase.HTMLAttributes<HTMLTModePickerElement>;
            "t-row": LocalJSX.TRow & JSXBase.HTMLAttributes<HTMLTRowElement>;
            "t-saturation-picker": LocalJSX.TSaturationPicker & JSXBase.HTMLAttributes<HTMLTSaturationPickerElement>;
            "t-select": LocalJSX.TSelect & JSXBase.HTMLAttributes<HTMLTSelectElement>;
            "t-slider": LocalJSX.TSlider & JSXBase.HTMLAttributes<HTMLTSliderElement>;
            "t-switch": LocalJSX.TSwitch & JSXBase.HTMLAttributes<HTMLTSwitchElement>;
            "t-textfield": LocalJSX.TTextfield & JSXBase.HTMLAttributes<HTMLTTextfieldElement>;
        }
    }
}
