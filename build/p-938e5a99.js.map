{"version":3,"names":["kebabToCamel","kebab","replace","g","toUpperCase","kebabToPascal","camelToPascal","camel","collapseWhitespace","text","trimMargin","trim","capitalize","charAt","slice","trimLineBreaks","generateUniqueID","Math","random","toString","substring"],"sources":["src/utils/stringUtils.ts"],"sourcesContent":["export const kebabToCamel = (kebab: string) => kebab.replace(/-([a-z0-9])/g, (g) => g[1].toUpperCase());\n\nexport const kebabToPascal = (kebab: string) => kebabToCamel(kebab).replace(/^[a-z]/, (g) => g.toUpperCase());\n\nexport const camelToPascal = (camel: string) => camel.replace(/^[a-z]/, (g) => g.toUpperCase());\n\nexport const collapseWhitespace = (text: string) => text.replace(/\\s+/g, ' ');\n\nexport const trimMargin = (text: string) => text.trim().replace(/^((?<!\\|).)*/gm, '');\n\nexport const capitalize = (text: string) => text.charAt(0).toUpperCase() + text.slice(1);\n\nexport const trimLineBreaks = (text: string) => text.replace(/^\\s*\\n/, '').replace(/\\n\\s*$/, '');\n\nexport const generateUniqueID = () => Math.random().toString(36).substring(2, 9);\n"],"mappings":"MAAaA,EAAgBC,GAAkBA,EAAMC,QAAQ,gBAAiBC,GAAMA,EAAE,GAAGC,gB,MAE5EC,EAAiBJ,GAAkBD,EAAaC,GAAOC,QAAQ,UAAWC,GAAMA,EAAEC,gB,MAElFE,EAAiBC,GAAkBA,EAAML,QAAQ,UAAWC,GAAMA,EAAEC,gB,MAEpEI,EAAsBC,GAAiBA,EAAKP,QAAQ,OAAQ,K,MAE5DQ,EAAcD,GAAiBA,EAAKE,OAAOT,QAAQ,iBAAkB,I,MAErEU,EAAcH,GAAiBA,EAAKI,OAAO,GAAGT,cAAgBK,EAAKK,MAAM,G,MAEzEC,EAAkBN,GAAiBA,EAAKP,QAAQ,SAAU,IAAIA,QAAQ,SAAU,I,MAEhFc,EAAmB,IAAMC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,U","ignoreList":[]}