{"file":"t-slider.entry.esm.js","mappings":";;AAAA,MAAM,UAAU,GAAG,inBAAinB;;MCOvnB,OAAO;;;;QAUlB,gBAAW,GAAG,CAAC,KAAiB;YAC9B,MAAM,MAAM,GAAG,KAAK,CAAC,MAA0B,CAAC;YAChD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;SAC9C,CAAC;mBAXoB,CAAC;mBACD,CAAC;oBACA,IAAI;;;;IAW3B,MAAM;QACJ,OAAO,4DAAK,KAAK,EAAC,SAAS,IACzB,8DAAO,OAAO,EAAE,OAAO,IAAG,IAAI,CAAC,KAAK,CAAS,EAC7C,8DACE,EAAE,EAAE,OAAO,EACX,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,OAAO,EAAE,IAAI,CAAC,WAAW,EACzB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,IAAI,EAAC,OAAO,EACZ,KAAK,EAAE,IAAI,CAAC,KAAK,GACjB,CACE,CAAC;KACR;;AAGH,MAAM,OAAO,GAAG,OAAO,CAAC;;;;;","names":[],"sources":["src/components/t-slider/t-slider.css?tag=t-slider&encapsulation=shadow","src/components/t-slider/t-slider.tsx"],"sourcesContent":[".wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: var(--t-spacing-in-group);\n  width: min-content;\n}\n\ninput {\n  --height: 1rem;\n  -webkit-appearance: none;\n  appearance: none;\n  height: var(--height);\n  background: var(--slider-background, grey);\n  border-radius: calc(var(--height) / 2);\n}\n\ninput::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: var(--height);\n  aspect-ratio: 1;\n  background-color: transparent;\n  border-radius: 50%;\n  cursor: pointer;\n  box-shadow: 0 0 0 2px #fff, 0 0 0 4px #000;\n}\n\ninput::-moz-range-thumb {\n  width: var(--height);\n  aspect-ratio: 1;\n  background-color: transparent;\n  border-radius: 50%;\n  cursor: pointer;\n  box-shadow: 0 0 0 2px #fff, 0 0 0 4px #000;\n}\n","import { Component, h, Prop, Event, EventEmitter } from '@stencil/core';\n\n@Component({\n  tag: 't-slider',\n  styleUrl: 't-slider.css',\n  shadow: true,\n})\nexport class TSlider {\n\n  @Prop() max: number = 1;\n  @Prop() min: number = 0;\n  @Prop() step: number = 0.01;\n  @Prop() label: string;\n  @Prop() value: number;\n\n  @Event() sliderChange: EventEmitter<number>;\n\n  handleInput = (event: InputEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.sliderChange.emit(target.valueAsNumber);\n  };\n\n  render() {\n    return <div class='wrapper'>\n      <label htmlFor={inputId}>{this.label}</label>\n      <input\n        id={inputId}\n        max={this.max}\n        min={this.min}\n        onInput={this.handleInput}\n        step={this.step}\n        type=\"range\"\n        value={this.value}\n      />\n    </div>;\n  }\n}\n\nconst inputId = 'input';\n"],"version":3}