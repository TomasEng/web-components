{"version":3,"names":["tTreeCss","TTreeStyle0","TTree","getAllItems","customElements","whenDefined","this","element","querySelectorAll","getAllVisibleItems","items","Promise","all","Array","from","map","async","item","include","isVisible","filter","resetTabindex","focusableItems","getFocusableItems","setFocusable","isFocusable","push","componentDidLoad","then","length","render","h","key","role"],"sources":["src/components/t-tree/t-tree.css?tag=t-tree&encapsulation=shadow","src/components/t-tree/t-tree.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\nul {\n  list-style-type: none;\n  padding-left: 0;\n  margin: 0;\n}\n","import { Component, h, Method, Element } from '@stencil/core';\n\n@Component({\n  tag: 't-tree',\n  styleUrl: 't-tree.css',\n  shadow: true,\n})\nexport class TTree {\n\n  @Element() element: HTMLElement;\n\n  @Method() async getAllItems(): Promise<NodeListOf<HTMLTTreeItemElement>> {\n    await customElements.whenDefined('t-tree-item');\n    return this.element.querySelectorAll('t-tree-item');\n  }\n\n  @Method() async getAllVisibleItems(): Promise<HTMLTTreeItemElement[]> {\n    const items = await this.getAllItems();\n    return (await Promise.all(\n      Array\n        .from(items)\n        .map(async item => ({\n          include: await item.isVisible(),\n          item,\n        }))\n    )).filter(({ include }) => include).map(({ item }) => item);\n  }\n\n  @Method() async resetTabindex() {\n    const focusableItems = await this.getFocusableItems();\n    await Promise.all(\n      focusableItems.map(async item => {\n        await item.setFocusable(false);\n      })\n    );\n  }\n\n  private async getFocusableItems(): Promise<HTMLTTreeItemElement[]> {\n    const items = await this.getAllItems();\n    const focusableItems: HTMLTTreeItemElement[] = [];\n    await Promise.all(\n      Array.from(items).map(async item => {\n        if (await item.isFocusable()) {\n          focusableItems.push(item);\n        }\n      })\n    );\n    return focusableItems;\n  }\n\n  componentDidLoad() {\n    this.getAllVisibleItems().then(async items => {\n      if (items.length > 0) {\n        await this.resetTabindex();\n        await items[0].setFocusable(true);\n      }\n    });\n  }\n\n  render() {\n    return (\n      <ul role='tree'>\n        <slot></slot>\n      </ul>\n    );\n  }\n}\n"],"mappings":"kDAAA,MAAMA,EAAW,uEACjB,MAAAC,EAAeD,E,MCMFE,EAAK,M,yBAIN,iBAAMC,SACRC,eAAeC,YAAY,eACjC,OAAOC,KAAKC,QAAQC,iBAAiB,c,CAG7B,wBAAMC,GACd,MAAMC,QAAcJ,KAAKH,cACzB,aAAcQ,QAAQC,IACpBC,MACGC,KAAKJ,GACLK,KAAIC,MAAMC,IAAI,CACbC,cAAeD,EAAKE,YACpBF,aAEHG,QAAO,EAAGF,aAAcA,IAASH,KAAI,EAAGE,UAAWA,G,CAG9C,mBAAMI,GACd,MAAMC,QAAuBhB,KAAKiB,0BAC5BZ,QAAQC,IACZU,EAAeP,KAAIC,MAAMC,UACjBA,EAAKO,aAAa,MAAM,I,CAK5B,uBAAMD,GACZ,MAAMb,QAAcJ,KAAKH,cACzB,MAAMmB,EAAyC,SACzCX,QAAQC,IACZC,MAAMC,KAAKJ,GAAOK,KAAIC,MAAMC,IAC1B,SAAUA,EAAKQ,cAAe,CAC5BH,EAAeI,KAAKT,E,MAI1B,OAAOK,C,CAGT,gBAAAK,GACErB,KAAKG,qBAAqBmB,MAAKZ,MAAMN,IACnC,GAAIA,EAAMmB,OAAS,EAAG,OACdvB,KAAKe,sBACLX,EAAM,GAAGc,aAAa,K,KAKlC,MAAAM,GACE,OACEC,EAAA,MAAAC,IAAA,2CAAIC,KAAK,QACPF,EAAA,QAAAC,IAAA,6C"}