{"version":3,"names":["tFieldsetCss","TFieldsetStyle0","TFieldset","render","h","key","this","legend","tHuePickerCss","THuePickerStyle0","THuePicker","handleSliderChange","event","hueChange","emit","detail","connectedCallback","withOffset","element","style","setProperty","label","max","min","onSliderChange","step","value","tIntegerPickerCss","TIntegerPickerStyle0","textInputCss","TIntegerPickerStyle1","TIntegerPicker","handleChange","target","integerChange","valueAsNumber","setBaseColour","hueoffset","htmlFor","slot","class","id","onChange","type","tSaturationPickerCss","TSaturationPickerStyle0","TSaturationPicker","saturationChange"],"sources":["src/components/t-fieldset/t-fieldset.css?tag=t-fieldset&encapsulation=shadow","src/components/t-fieldset/t-fieldset.tsx","src/components/t-hue-picker/t-hue-picker.css?tag=t-hue-picker&encapsulation=shadow","src/components/t-hue-picker/t-hue-picker.tsx","src/components/t-integer-picker/t-integer-picker.css?tag=t-integer-picker&encapsulation=shadow","src/style/text-input.css?tag=t-integer-picker&encapsulation=shadow","src/components/t-integer-picker/t-integer-picker.tsx","src/components/t-saturation-picker/t-saturation-picker.css?tag=t-saturation-picker&encapsulation=shadow","src/components/t-saturation-picker/t-saturation-picker.tsx"],"sourcesContent":["fieldset {\r\n  border: none;\r\n  padding: 0;\r\n}\r\n\r\nlegend {\r\n  display: contents;\r\n  font-weight: bold;\r\n}\r\n","import { Component, h, Prop } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 't-fieldset',\r\n  styleUrl: 't-fieldset.css',\r\n  shadow: true\r\n})\r\nexport class TFieldset {\r\n\r\n  @Prop() legend: string;\r\n\r\n  render() {\r\n    return <fieldset><legend>{this.legend}</legend><slot/></fieldset>;\r\n  }\r\n}\r\n",":host {\r\n  --chroma: 0.4;\r\n  --lightness: 0.8;\r\n  --hue-offset: 0; /* Set by JS */\r\n  --slider-background: linear-gradient(\r\n    in oklch longer hue to right,\r\n    oklch(var(--lightness) var(--chroma) var(--hue-offset)),\r\n    oklch(var(--lightness) var(--chroma) calc(var(--hue-offset) + 360))\r\n  );\r\n}\r\n","import { Component, h, Prop, Event, EventEmitter, Element } from '@stencil/core';\r\nimport { TSliderCustomEvent } from '../../components';\r\nimport state from '../../store';\r\n\r\n@Component({\r\n  tag: 't-hue-picker',\r\n  styleUrl: 't-hue-picker.css',\r\n  shadow: true\r\n})\r\nexport class THuePicker {\r\n\r\n  @Element() element: HTMLTHuePickerElement;\r\n\r\n  @Prop() label: string;\r\n  @Prop() value: number;\r\n  @Prop() withOffset: boolean = false;\r\n\r\n  @Event() hueChange: EventEmitter<number>;\r\n\r\n  connectedCallback() {\r\n    if (this.withOffset) {\r\n      this.element.style.setProperty('--hue-offset', `var(--t-colour-base-app-hue)`);\r\n    }\r\n  }\r\n\r\n  handleSliderChange = (event: TSliderCustomEvent<number>) =>\r\n    this.hueChange.emit(event.detail);\r\n\r\n  render() {\r\n    return <t-slider\r\n      label={this.label}\r\n      max={360}\r\n      min={0}\r\n      onSliderChange={this.handleSliderChange}\r\n      step={1}\r\n      value={this.value}\r\n    />;\r\n  }\r\n}\r\n","input::-webkit-inner-spin-button {\r\n  height: var(--height);\r\n  cursor: pointer;\r\n  margin-right: calc(-1 * var(--padding));\r\n  margin-left: var(--padding);\r\n}\r\n",".text-input {\r\n  --font-size: var(--t-default-font-size);\r\n  --height: var(--t-clickable-area-size);\r\n  --padding: calc((var(--height) - var(--t-default-font-size))/2);\r\n  background-color: var(--t-colour-input-field-background);\r\n  border-radius: 6px;\r\n  border: 1px solid var(--t-colour-base-component-high-contrast);\r\n  box-shadow: inset 1px 1px 1px rgba(0,0,0,0.3);\r\n  box-sizing: border-box;\r\n  color: var(--t-font-colour-default);\r\n  font-family: var(--t-default-font-family);\r\n  font-size: var(--font-size);\r\n  line-height: var(--font-size);\r\n  outline: none;\r\n  padding: var(--padding);\r\n  transition: var(--t-transition-duration-medium);\r\n}\r\n\r\n.text-input:focus {\r\n  transform: scale(1.05);\r\n  background-color: var(--t-colour-page-background);\r\n  box-shadow: color-mix(in oklab, var(--t-colour-base-component-high-contrast) 20%, transparent) 0 0 24px;\r\n}\r\n\r\n.text-input::selection {\r\n  background-color: var(--t-selection-background-colour);\r\n  color: var(--t-selection-font-colour);\r\n}\r\n","import { Component, h, Prop, Event, EventEmitter, Element } from '@stencil/core';\r\nimport { ComponentHue } from '../../types/ComponentHue';\r\nimport { setBaseColour } from '../../utils/componentUtils';\r\n\r\n@Component({\r\n  tag: 't-integer-picker',\r\n  styleUrls: ['t-integer-picker.css', '../../style/text-input.css'],\r\n  shadow: true,\r\n})\r\nexport class TIntegerPicker {\r\n\r\n  @Element() element: HTMLTIntegerPickerElement;\r\n\r\n  @Prop() label: string;\r\n  @Prop() value: number;\r\n  @Prop() min: number;\r\n  @Prop() max: number;\r\n  @Prop() hueoffset: ComponentHue = 0;\r\n\r\n  @Event() integerChange: EventEmitter<number>;\r\n\r\n  connectedCallback() {\r\n    setBaseColour(this.element, this.hueoffset);\r\n  }\r\n\r\n  private handleChange = (event: InputEvent) => {\r\n    const target = event.target as HTMLInputElement;\r\n    this.integerChange.emit(target.valueAsNumber);\r\n  };\r\n\r\n  render() {\r\n    return <internal-input-wrapper>\r\n      <label htmlFor=\"input\" slot=\"label\">{this.label}</label>\r\n      <input\r\n        class=\"text-input\"\r\n        id=\"input\"\r\n        max={this.max}\r\n        min={this.min}\r\n        onChange={this.handleChange}\r\n        slot=\"input\"\r\n        type=\"number\"\r\n        value={this.value}\r\n      />\r\n    </internal-input-wrapper>;\r\n  }\r\n}\r\n",":host {\r\n  --slider-background: linear-gradient(\r\n    to right,\r\n    oklch(0.8 0 var(--t-colour-base-app-hue)),\r\n    oklch(0.8 0.4 var(--t-colour-base-app-hue))\r\n  );\r\n}\r\n","import { Component, h, Prop, Event, EventEmitter } from '@stencil/core';\r\nimport { TSliderCustomEvent } from '../../components';\r\n\r\n@Component({\r\n  tag: 't-saturation-picker',\r\n  styleUrl: 't-saturation-picker.css',\r\n  shadow: true,\r\n})\r\nexport class TSaturationPicker {\r\n\r\n  @Prop() label: string;\r\n  @Prop() value: number;\r\n\r\n  @Event() saturationChange: EventEmitter<number>;\r\n\r\n  handleSliderChange = (event: TSliderCustomEvent<number>) =>\r\n    this.saturationChange.emit(event.detail);\r\n\r\n  render() {\r\n    return <t-slider\r\n      label={this.label}\r\n      max={0.3}\r\n      min={0}\r\n      onSliderChange={this.handleSliderChange}\r\n      step={0.01}\r\n      value={this.value}\r\n    />;\r\n  }\r\n}\r\n"],"mappings":"wFAAA,MAAMA,EAAe,2EACrB,MAAAC,EAAeD,E,MCMFE,EAAS,M,+CAIpB,MAAAC,GACE,OAAOC,EAAA,YAAAC,IAAA,4CAAUD,EAAA,UAAAC,IAAA,4CAASC,KAAKC,QAAgBH,EAAA,QAAAC,IAAA,6C,aCZnD,MAAMG,EAAgB,iRACtB,MAAAC,EAAeD,E,MCQFE,EAAU,M,8DAgBrBJ,KAAAK,mBAAsBC,GACpBN,KAAKO,UAAUC,KAAKF,EAAMG,Q,0DAXE,K,CAI9B,iBAAAC,GACE,GAAIV,KAAKW,WAAY,CACnBX,KAAKY,QAAQC,MAAMC,YAAY,eAAgB,+B,EAOnD,MAAAjB,GACE,OAAOC,EAAA,YAAAC,IAAA,2CACLgB,MAAOf,KAAKe,MACZC,IAAK,IACLC,IAAK,EACLC,eAAgBlB,KAAKK,mBACrBc,KAAM,EACNC,MAAOpB,KAAKoB,O,0CCnClB,MAAMC,EAAoB,0IAC1B,MAAAC,EAAeD,ECDf,MAAME,EAAe,+2BACrB,MAAAC,EAAeD,E,MCQFE,EAAc,M,sEAgBjBzB,KAAA0B,aAAgBpB,IACtB,MAAMqB,EAASrB,EAAMqB,OACrB3B,KAAK4B,cAAcpB,KAAKmB,EAAOE,cAAc,E,+FAVb,C,CAIlC,iBAAAnB,GACEoB,EAAc9B,KAAKY,QAASZ,KAAK+B,U,CAQnC,MAAAlC,GACE,OAAOC,EAAA,0BAAAC,IAAA,4CACLD,EAAA,SAAAC,IAAA,2CAAOiC,QAAQ,QAAQC,KAAK,SAASjC,KAAKe,OAC1CjB,EAAA,SAAAC,IAAA,2CACEmC,MAAM,aACNC,GAAG,QACHnB,IAAKhB,KAAKgB,IACVC,IAAKjB,KAAKiB,IACVmB,SAAUpC,KAAK0B,aACfO,KAAK,QACLI,KAAK,SACLjB,MAAOpB,KAAKoB,Q,4CCzCpB,MAAMkB,EAAuB,2KAC7B,MAAAC,EAAeD,E,MCOFE,EAAiB,M,4EAO5BxC,KAAAK,mBAAsBC,GACpBN,KAAKyC,iBAAiBjC,KAAKF,EAAMG,Q,0CAEnC,MAAAZ,GACE,OAAOC,EAAA,YAAAC,IAAA,2CACLgB,MAAOf,KAAKe,MACZC,IAAK,GACLC,IAAK,EACLC,eAAgBlB,KAAKK,mBACrBc,KAAM,IACNC,MAAOpB,KAAKoB,O","ignoreList":[]}