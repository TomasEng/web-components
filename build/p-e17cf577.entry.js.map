{"version":3,"names":["tTreeCss","TTreeStyle0","TTree","getAllItems","customElements","whenDefined","this","element","querySelectorAll","getAllVisibleItems","items","Promise","all","Array","from","map","async","item","include","isVisible","filter","resetTabindex","focusableItems","getFocusableItems","setFocusable","isFocusable","push","componentDidLoad","then","length","render","h","key","role","dFilled","dUnfilled","CaretRightIcon","_a","fill","rest","__rest","SvgTemplate","Object","assign","d","tTreeItemCss","TTreeItemStyle0","TTreeItem","isExpanded","expanded","isTopLevel","parent","parentElement","isParentVisible","linkOrButton","focusable","tagName","focusOnLink","focusOnElement","getNextVisibleItem","root","getRoot","allVisibleItems","index","indexOf","nextIndex","getPreviousVisibleItem","previousIndex","getLastVisibleSubItem","visibleSubItems","getVisibleSubItems","hasChildren","subItems","subItem","getSubItems","closest","shadowRoot","querySelector","close","open","toggleExpanded","componentDidRender","handleKeyDown","event","preventDefault","handleArrowRight","handleArrowLeft","handleArrowUp","handleArrowDown","handleHome","handleEnd","moveFocusDown","moveFocusToParent","moveFocusUp","moveFocusToStart","moveFocusToEnd","previousItem","nextItem","firstItem","lastItem","handleClick","labelClick","emit","class","title","label","renderLink","href","onElementClick","e","detail","onKeyDown","renderLabel","Fragment","onClick","handleArrowClick","stopPropagation"],"sources":["src/components/t-tree/t-tree.css?tag=t-tree&encapsulation=shadow","src/components/t-tree/t-tree.tsx","src/icons/CaretRightIcon.tsx","src/components/t-tree-item/t-tree-item.css?tag=t-tree-item&encapsulation=shadow","src/components/t-tree-item/t-tree-item.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\nul {\n  list-style-type: none;\n  padding-left: 0;\n  margin: 0;\n}\n","import { Component, h, Method, Element } from '@stencil/core';\n\n@Component({\n  tag: 't-tree',\n  styleUrl: 't-tree.css',\n  shadow: true,\n})\nexport class TTree {\n\n  @Element() element: HTMLElement;\n\n  @Method() async getAllItems(): Promise<NodeListOf<HTMLTTreeItemElement>> {\n    await customElements.whenDefined('t-tree-item');\n    return this.element.querySelectorAll('t-tree-item');\n  }\n\n  @Method() async getAllVisibleItems(): Promise<HTMLTTreeItemElement[]> {\n    const items = await this.getAllItems();\n    return (await Promise.all(\n      Array\n        .from(items)\n        .map(async item => ({\n          include: await item.isVisible(),\n          item,\n        }))\n    )).filter(({ include }) => include).map(({ item }) => item);\n  }\n\n  @Method() async resetTabindex() {\n    const focusableItems = await this.getFocusableItems();\n    await Promise.all(\n      focusableItems.map(async item => {\n        await item.setFocusable(false);\n      })\n    );\n  }\n\n  private async getFocusableItems(): Promise<HTMLTTreeItemElement[]> {\n    const items = await this.getAllItems();\n    const focusableItems: HTMLTTreeItemElement[] = [];\n    await Promise.all(\n      Array.from(items).map(async item => {\n        if (await item.isFocusable()) {\n          focusableItems.push(item);\n        }\n      })\n    );\n    return focusableItems;\n  }\n\n  componentDidLoad() {\n    this.getAllVisibleItems().then(async items => {\n      if (items.length > 0) {\n        await this.resetTabindex();\n        await items[0].setFocusable(true);\n      }\n    });\n  }\n\n  render() {\n    return (\n      <ul role='tree'>\n        <slot></slot>\n      </ul>\n    );\n  }\n}\n","import { h } from '@stencil/core';\nimport { IconProps } from './IconProps';\nimport { SvgTemplate } from './SvgTemplate';\n\nconst dFilled = 'M9.713 18.193a.75.75 0 0 1-.463-.693v-11a.75.75 0 0 1 1.28-.53l5.5 5.5a.75.75 0 0 1 0 1.06l-5.5 5.5a.75.75 0 0 1-.817.163Z';\nconst dUnfilled = 'M9.713 18.193a.75.75 0 0 1-.463-.693v-11a.75.75 0 0 1 1.28-.53l5.5 5.5a.75.75 0 0 1 0 1.06l-5.5 5.5a.75.75 0 0 1-.817.163Zm1.037-2.504L14.44 12l-3.69-3.69v7.38Z';\n\nexport const CaretRightIcon = ({fill, ...rest}: IconProps) => (\n  <SvgTemplate {...rest}>\n    <path\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d={fill ? dFilled : dUnfilled}\n      fill=\"currentColor\"\n    />\n  </SvgTemplate>\n);\n","t-link::part(link), t-button::part(button) {\n  display: flex;\n  align-items: center;\n  gap: var(--t-spacing-inline);\n}\n\nli {\n  &.expanded {\n    svg {\n      rotate: 90deg;\n    }\n\n    .collapsible {\n      grid-template-rows: 1fr;\n    }\n  }\n\n  &.collapsed {\n    svg {\n      rotate: 0deg;\n    }\n\n    .collapsible {\n      grid-template-rows: 0fr;\n\n      ul {\n        visibility: hidden;\n      }\n    }\n  }\n\n  .collapsible {\n    overflow: hidden;\n    display: grid;\n    grid-template-rows: 1fr; /* To make height transition work */\n    transition: grid-template-rows var(--t-transition-duration-medium);\n\n    ul {\n      min-height: 0;\n      transition: visibility 1s;\n    }\n  }\n\n  svg {\n    transition: rotate var(--t-transition-duration-medium);\n  }\n}\n\nul {\n  list-style-type: none;\n  padding-left: var(--t-spacing-large);\n  margin: 0;\n}\n","import { Component, Element, h, Method, Prop, State, Fragment, Event, EventEmitter } from '@stencil/core';\nimport { CaretRightIcon } from '../../icons/CaretRightIcon';\nimport { TLinkOrButtonCustomEvent } from '../../components';\n\n@Component({\n  tag: 't-tree-item',\n  styleUrl: 't-tree-item.css',\n  shadow: true,\n})\nexport class TTreeItem {\n\n  @Element() element: HTMLTTreeItemElement;\n\n  @Prop() label: string;\n  @Prop() href: string | null = null;\n\n  @State() expanded = true;\n  @State() hasChildren: boolean = false;\n\n  @Event() labelClick: EventEmitter<MouseEvent>;\n\n  @Method() async isExpanded(): Promise<boolean> {\n    await customElements.whenDefined('t-tree-item');\n    return this.expanded;\n  }\n\n  @Method() async isVisible(): Promise<boolean> {\n    const isTopLevel = await this.isTopLevel();\n    if (isTopLevel) {\n      return true;\n    } else {\n      const parent = this.element.parentElement as HTMLTTreeItemElement;\n      const isParentVisible = await parent.isVisible();\n      if (!isParentVisible) return false;\n      return await parent.isExpanded();\n    }\n  }\n\n  @Method() async isFocusable(): Promise<boolean> {\n    await customElements.whenDefined('t-link');\n    return this.linkOrButton.focusable;\n  }\n\n  @Method() async isTopLevel(): Promise<boolean> {\n    await customElements.whenDefined('t-tree-item');\n    return this.element.parentElement.tagName === 'T-TREE';\n  }\n\n  @Method() async focusOnLink() {\n    await Promise.all([\n      customElements.whenDefined('t-link'),\n      customElements.whenDefined('t-tree-item'),\n    ]);\n    await this.linkOrButton.focusOnElement();\n  }\n\n  @Method() async getNextVisibleItem(): Promise<HTMLTTreeItemElement | null> {\n    const root = await this.getRoot();\n    const allVisibleItems = await root.getAllVisibleItems();\n    const index = Array.from(allVisibleItems).indexOf(this.element);\n    const nextIndex = index + 1;\n    return allVisibleItems[nextIndex] || null;\n  }\n\n  @Method() async getPreviousVisibleItem(): Promise<HTMLTTreeItemElement | null> {\n    const root = await this.getRoot();\n    const allVisibleItems = await root.getAllVisibleItems();\n    const index = Array.from(allVisibleItems).indexOf(this.element);\n    const previousIndex = index - 1;\n    return allVisibleItems[previousIndex] || null;\n  }\n\n  @Method() async getLastVisibleSubItem(): Promise<HTMLTTreeItemElement | null> {\n    await customElements.whenDefined('t-tree-item');\n    const visibleSubItems = await this.getVisibleSubItems();\n    if (visibleSubItems.length > 0) {\n      return visibleSubItems[visibleSubItems.length - 1];\n    } else {\n      return null;\n    }\n  }\n\n  @Method() async getVisibleSubItems(): Promise<HTMLTTreeItemElement[]> {\n    await customElements.whenDefined('t-tree-item');\n    if (this.expanded && this.hasChildren) {\n      return Array\n        .from(this.subItems)\n        .filter(async (subItem) => await subItem.isVisible());\n    } else {\n      return [];\n    }\n  }\n\n  @Method() async getSubItems() {\n    await customElements.whenDefined('t-tree-item');\n    return this.subItems;\n  }\n\n  @Method() async setFocusable(focusable: boolean) {\n    await customElements.whenDefined('t-link-or-button');\n    return this.linkOrButton.focusable = focusable;\n  }\n\n  @Method() async getRoot(): Promise<HTMLTTreeElement> {\n    await customElements.whenDefined('t-tree');\n    return this.element.closest('t-tree');\n  }\n\n  get linkOrButton(): HTMLTLinkOrButtonElement {\n    return this.element.shadowRoot.querySelector('t-link-or-button');\n  }\n\n  get subItems(): NodeListOf<HTMLTTreeItemElement> {\n    return this.element.querySelectorAll('t-tree-item');\n  }\n\n  private close() {\n    this.expanded = false;\n  }\n\n  private open() {\n    this.expanded = true;\n  }\n\n  private toggleExpanded() {\n    this.expanded = !this.expanded;\n  }\n\n  componentDidRender() {\n    customElements.whenDefined('t-tree-item').then(() => {\n      this.hasChildren = this.element.querySelector('t-tree-item') !== null;\n    });\n  }\n\n  private async handleKeyDown(event: KeyboardEvent) {\n    switch (event.key) {\n      case 'ArrowRight':\n        event.preventDefault();\n        await this.handleArrowRight();\n        break;\n      case 'ArrowLeft':\n        event.preventDefault();\n        await this.handleArrowLeft();\n        break;\n      case 'ArrowUp':\n        event.preventDefault();\n        await this.handleArrowUp();\n        break;\n      case 'ArrowDown':\n        event.preventDefault();\n        await this.handleArrowDown();\n        break;\n      case 'Home':\n        event.preventDefault();\n        await this.handleHome();\n        break;\n      case 'End':\n        event.preventDefault();\n        await this.handleEnd();\n        break;\n    }\n  }\n\n  private async handleArrowRight() {\n    if (this.hasChildren) {\n      if (this.expanded) {\n        await this.moveFocusDown();\n      } else {\n        this.open();\n      }\n    }\n  }\n\n  private async handleArrowLeft() {\n    if (this.hasChildren && this.expanded) {\n      this.close();\n    } else {\n      const isTopLevel = await this.isTopLevel();\n      if (!isTopLevel) await this.moveFocusToParent();\n    }\n  }\n\n  private async handleArrowUp() {\n    await this.moveFocusUp();\n  }\n\n  private async handleArrowDown() {\n    await this.moveFocusDown();\n  }\n\n  private async handleHome() {\n    await this.moveFocusToStart();\n  }\n\n  private async handleEnd() {\n    await this.moveFocusToEnd();\n  }\n\n  private async moveFocusUp() {\n    const previousItem = await this.getPreviousVisibleItem();\n    if (previousItem) {\n      await this.setFocusable(false);\n      await previousItem.setFocusable(true);\n      await previousItem.focusOnLink();\n    }\n  }\n\n  private async moveFocusDown() {\n    const nextItem = await this.getNextVisibleItem();\n    if (nextItem) {\n      await this.setFocusable(false);\n      await nextItem.setFocusable(true);\n      await nextItem.focusOnLink();\n    }\n  }\n\n  private async moveFocusToParent() {\n    const isTopLevel = await this.isTopLevel();\n    if (isTopLevel) return;\n    const parent = this.element.parentElement as HTMLTTreeItemElement;\n    await this.setFocusable(false);\n    await parent.setFocusable(true);\n    await parent.focusOnLink();\n  }\n\n  private async moveFocusToStart() {\n    const root = await this.getRoot();\n    const allVisibleItems = await root.getAllVisibleItems();\n    const firstItem = allVisibleItems[0];\n    await this.setFocusable(false);\n    await firstItem.setFocusable(true);\n    await firstItem.focusOnLink();\n  }\n\n  private async moveFocusToEnd() {\n    const root = await this.getRoot();\n    const allVisibleItems = await root.getAllVisibleItems();\n    const lastItem = allVisibleItems[allVisibleItems.length - 1];\n    await this.setFocusable(false);\n    await lastItem.setFocusable(true);\n    await lastItem.focusOnLink();\n  }\n\n  private async handleClick(event: MouseEvent) {\n    if (this.hasChildren) {\n      const root = await this.getRoot();\n      await root.resetTabindex();\n      await this.setFocusable(true);\n    }\n    this.labelClick.emit(event);\n  }\n\n  render() {\n    return (\n      <li\n        aria-expanded={this.expanded ? 'true' : 'false'}\n        class={this.expanded ? 'expanded' : 'collapsed'}\n        role='treeitem'\n        title={this.label}\n      >\n        {this.renderLink()}\n        {this.hasChildren && (\n          <div class='collapsible'>\n            <ul role='group'>\n              <slot></slot>\n            </ul>\n          </div>\n        )}\n      </li>\n    );\n  }\n\n  private renderLink() {\n    return (\n      <t-link-or-button\n        href={this.href}\n        onElementClick={(e: TLinkOrButtonCustomEvent<MouseEvent>) => this.handleClick(e.detail)}\n        onKeyDown={(e) => this.handleKeyDown(e)}\n      >\n        {this.renderLabel()}\n      </t-link-or-button>\n    );\n  }\n\n  private renderLabel() {\n    return (<>\n      {this.hasChildren && (\n        <CaretRightIcon\n          fill\n          onClick={(e) => this.handleArrowClick(e)}\n        />\n      )}\n      <span class='label'>{this.label}</span>\n    </>);\n  }\n\n  private handleArrowClick(event: MouseEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.toggleExpanded();\n  }\n}\n"],"mappings":"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"}