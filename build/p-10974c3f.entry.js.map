{"version":3,"names":["tTextfieldCss","TTextfieldStyle0","textInputCss","TTextfieldStyle1","TTextfield","constructor","hostRef","this","hueoffset","connectedCallback","setBaseColour","element","render","h","key","htmlFor","slot","label","id","class","type","value","onInput","e","valueChange","emit","target"],"sources":["src/components/t-textfield/t-textfield.css?tag=t-textfield&encapsulation=shadow","src/style/text-input.css?tag=t-textfield&encapsulation=shadow","src/components/t-textfield/t-textfield.tsx"],"sourcesContent":[null,".text-input {\r\n  --font-size: var(--t-default-font-size);\r\n  --height: var(--t-clickable-area-size);\r\n  --padding: calc((var(--height) - var(--t-default-font-size))/2);\r\n  background-color: var(--t-colour-input-field-background);\r\n  border-radius: 6px;\r\n  border: 1px solid var(--t-colour-base-component-high-contrast);\r\n  box-shadow: inset 1px 1px 1px rgba(0,0,0,0.3);\r\n  box-sizing: border-box;\r\n  color: var(--t-font-colour-default);\r\n  font-family: var(--t-default-font-family);\r\n  font-size: var(--font-size);\r\n  line-height: var(--font-size);\r\n  outline: none;\r\n  padding: var(--padding);\r\n  transition: var(--t-transition-duration-medium);\r\n}\r\n\r\n.text-input:focus {\r\n  transform: scale(1.05);\r\n  background-color: var(--t-colour-page-background);\r\n  box-shadow: color-mix(in oklab, var(--t-colour-base-component-high-contrast) 20%, transparent) 0 0 24px;\r\n}\r\n\r\n.text-input::selection {\r\n  background-color: var(--t-selection-background-colour);\r\n  color: var(--t-selection-font-colour);\r\n}\r\n","import { Component, EventEmitter, h, Prop, Event, Element } from '@stencil/core';\r\nimport { ComponentHue } from '../../types/ComponentHue';\r\nimport { setBaseColour } from '../../utils/componentUtils';\r\n\r\n@Component({\r\n  tag: 't-textfield',\r\n  styleUrls: ['t-textfield.css', '../../style/text-input.css'],\r\n  shadow: true,\r\n})\r\nexport class TTextfield {\r\n\r\n  @Element() element: HTMLTTextfieldElement;\r\n\r\n  @Prop() hueoffset: ComponentHue = 0;\r\n  @Prop() label: string;\r\n  @Prop() value: string;\r\n\r\n  @Event() valueChange: EventEmitter<string>;\r\n\r\n  connectedCallback() {\r\n    setBaseColour(this.element, this.hueoffset);\r\n  }\r\n\r\n  render() {\r\n    return <internal-input-wrapper>\r\n      <label htmlFor=\"input\" slot=\"label\">{this.label}</label>\r\n      <input\r\n        slot=\"input\"\r\n        id=\"input\"\r\n        class=\"text-input\"\r\n        type=\"text\"\r\n        value={this.value}\r\n        onInput={(e) => {\r\n          this.valueChange.emit((e.target as HTMLInputElement).value);\r\n        }}\r\n      />\r\n    </internal-input-wrapper>;\r\n  }\r\n}\r\n"],"mappings":"wFAAA,MAAMA,EAAgB,GACtB,MAAAC,EAAeD,ECDf,MAAME,EAAe,+2BACrB,MAAAC,EAAeD,E,MCQFE,EAAU,MALvB,WAAAC,CAAAC,G,mDASUC,KAAAC,UAA0B,C,CAMlC,iBAAAC,GACEC,EAAcH,KAAKI,QAASJ,KAAKC,U,CAGnC,MAAAI,GACE,OAAOC,EAAA,0BAAAC,IAAA,4CACLD,EAAA,SAAAC,IAAA,2CAAOC,QAAQ,QAAQC,KAAK,SAAST,KAAKU,OAC1CJ,EAAA,SAAAC,IAAA,2CACEE,KAAK,QACLE,GAAG,QACHC,MAAM,aACNC,KAAK,OACLC,MAAOd,KAAKc,MACZC,QAAUC,IACRhB,KAAKiB,YAAYC,KAAMF,EAAEG,OAA4BL,MAAM,I","ignoreList":[]}