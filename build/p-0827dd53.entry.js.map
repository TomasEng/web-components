{"version":3,"names":["tButtonCss","TButtonStyle0","TButton","constructor","hostRef","this","hueoffset","variant","focusable","handleClick","e","buttonClick","emit","focusOnButton","customElements","whenDefined","button","focus","element","shadowRoot","querySelector","connectedCallback","setBaseColour","render","tabIndex","h","Fragment","Object","assign","key","class","onClick","part","type","buttonAttributes","name"],"sources":["src/components/t-button/t-button.css?tag=t-button&encapsulation=shadow","src/components/t-button/t-button.tsx"],"sourcesContent":[".t-button {\r\n  --button-colour: var(--t-colour-base-component);\r\n  --button-padding: calc((var(--height) - var(--t-default-font-size)) / 2);\r\n  --height: var(--t-clickable-area-size);\r\n  background: linear-gradient(\r\n    to top,\r\n    color-mix(in oklab, var(--button-colour) 90%, black),\r\n    var(--button-colour),\r\n    color-mix(in oklab, var(--button-colour) 90%, white)\r\n  );\r\n  box-shadow:\r\n    inset color-mix(in oklab, var(--button-colour) 75%, white) 0 1px,\r\n    inset color-mix(in oklab, var(--button-colour) 75%, black) 0 -1px,\r\n    color-mix(in oklab, white 25%, transparent) 0 1px 1px,\r\n    color-mix(in oklab, black 25%, transparent) 0 -1px 1px,\r\n    rgb(0 0 0 / 0.2) 0 -1px 1px;\r\n  align-items: center;\r\n  border-radius: 100px;\r\n  box-sizing: border-box;\r\n  border: 0 solid var(--t-colour-base-component-high-contrast);\r\n  color: var(--t-font-colour-default);\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  font-family: var(--t-default-font-family);\r\n  font-size: var(--t-default-font-size);\r\n  gap: var(--t-spacing-inline);\r\n  line-height: 1;\r\n  min-height: var(--height);\r\n  padding: var(--button-padding);\r\n  transition: box-shadow var(--transistion-duration);\r\n\r\n  slot[name=\"icon\"] {\r\n    align-self: center;\r\n  }\r\n\r\n  &.transparent {\r\n    --button-colour: transparent;\r\n  }\r\n\r\n  &.without-background {\r\n    background: none;\r\n    box-shadow: none;\r\n    color: var(--t-colour-base-component-high-contrast);\r\n    margin: calc(var(--button-padding) * -1);\r\n\r\n    &:hover {\r\n      background: color-mix(in oklab, var(--t-colour-base-component) 25%, transparent);\r\n    }\r\n\r\n    &:active {\r\n      background: var(--t-colour-base-component);\r\n    }\r\n  }\r\n\r\n  &.link {\r\n    background: none;\r\n    box-shadow: none;\r\n    color: var(--t-colour-base-component-high-contrast);\r\n    margin: 0;\r\n    padding: 0;\r\n\r\n    &:hover {\r\n      background: none;\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n}\r\n\r\n.t-button:hover {\r\n  --button-colour: color-mix(in oklab, var(--t-colour-base-component) 75%, white);\r\n}\r\n\r\n.t-button:active {\r\n  --transistion-duration: 0s;\r\n  background: var(--button-colour);\r\n}\r\n\r\n* {\r\n  --t-base-colour-hue-offset: 180;\r\n}\r\n","import { Component, h, Prop, Event, Element, Method, EventEmitter, Fragment } from '@stencil/core';\r\nimport { ComponentHue } from '../../types/ComponentHue';\r\nimport { ButtonAttributes } from '../../types/HTMLAttributes';\r\nimport { ButtonVariant } from './ButtonVariant';\r\nimport { setBaseColour } from '../../utils/componentUtils';\r\n\r\n@Component({\r\n  tag: 't-button',\r\n  styleUrl: 't-button.css',\r\n  shadow: true,\r\n})\r\nexport class TButton {\r\n\r\n  @Element() element: HTMLTButtonElement;\r\n\r\n  @Prop() hueoffset: ComponentHue = 0;\r\n  @Prop() buttonAttributes: ButtonAttributes;\r\n  @Prop() variant: ButtonVariant = 'default';\r\n  @Prop() focusable: boolean = true;\r\n\r\n  @Event() buttonClick: EventEmitter<MouseEvent>;\r\n\r\n  @Method() async focusOnButton() {\r\n    await customElements.whenDefined('t-button');\r\n    this.button.focus();\r\n  }\r\n\r\n  get button(): HTMLButtonElement {\r\n    return this.element.shadowRoot.querySelector('button');\r\n  }\r\n\r\n  private handleClick = (e: MouseEvent) => {\r\n    this.buttonClick.emit(e);\r\n  }\r\n\r\n  connectedCallback() {\r\n    setBaseColour(this.element, this.hueoffset);\r\n  }\r\n\r\n  render() {\r\n    const tabIndex = this.focusable ? 0 : -1;\r\n    return <>\r\n      <button\r\n        class={`t-button ${this.variant}`}\r\n        onClick={(e) => this.handleClick(e)}\r\n        part='button'\r\n        tabIndex={tabIndex}\r\n        type='button'\r\n        {...this.buttonAttributes}\r\n      >\r\n        <slot name='icon' aria-hidden={true}/>\r\n        <slot/>\r\n      </button>\r\n    </>;\r\n  }\r\n}\r\n"],"mappings":"+FAAA,MAAMA,EAAa,ixEACnB,MAAAC,EAAeD,E,MCUFE,EAAO,MALpB,WAAAC,CAAAC,G,mDASUC,KAAAC,UAA0B,EAE1BD,KAAAE,QAAyB,UACzBF,KAAAG,UAAqB,KAarBH,KAAAI,YAAeC,IACrBL,KAAKM,YAAYC,KAAKF,EAAE,C,CAVhB,mBAAMG,SACRC,eAAeC,YAAY,YACjCV,KAAKW,OAAOC,O,CAGd,UAAID,GACF,OAAOX,KAAKa,QAAQC,WAAWC,cAAc,S,CAO/C,iBAAAC,GACEC,EAAcjB,KAAKa,QAASb,KAAKC,U,CAGnC,MAAAiB,GACE,MAAMC,EAAWnB,KAAKG,UAAY,GAAK,EACvC,OAAOiB,EAAAC,EAAA,KACLD,EAAA,SAAAE,OAAAC,OAAA,CAAAC,IAAA,2CACEC,MAAO,YAAYzB,KAAKE,UACxBwB,QAAUrB,GAAML,KAAKI,YAAYC,GACjCsB,KAAK,SACLR,SAAUA,EACVS,KAAK,UACD5B,KAAK6B,kBAETT,EAAA,QAAAI,IAAA,2CAAMM,KAAK,OAAM,cAAc,OAC/BV,EAAA,QAAAI,IAAA,8C","ignoreList":[]}