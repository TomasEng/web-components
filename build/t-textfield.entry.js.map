{"file":"t-textfield.entry.esm.js","mappings":";;AAAA,MAAM,aAAa,GAAG,EAAE;;ACAxB,MAAM,YAAY,GAAG,kvBAAkvB;;MCQ1vB,UAAU;;;;mBAEO,CAAC;;;;IAM7B,MAAM;QACJ,OAAO,gFAAyB,gBAAgB,EAAE,IAAI,CAAC,GAAG,IACxD,iFACE,8DAAO,OAAO,EAAC,OAAO,EAAC,IAAI,EAAC,OAAO,IAAE,IAAI,CAAC,KAAK,CAAS,EACxD,8DACE,IAAI,EAAC,OAAO,EACZ,EAAE,EAAC,OAAO,EACV,KAAK,EAAC,YAAY,EAClB,IAAI,EAAC,MAAM,EACX,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,OAAO,EAAE,CAAC,CAAC;gBACT,IAAI,CAAC,WAAW,CAAC,IAAI,CAAE,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC,CAAC;aAC7D,GACD,CACqB,CACD,CAAC;KAC5B;;;;;;","names":[],"sources":["src/components/t-textfield/t-textfield.css?tag=t-textfield&encapsulation=shadow","src/style/text-input.css?tag=t-textfield&encapsulation=shadow","src/components/t-textfield/t-textfield.tsx"],"sourcesContent":["",".text-input {\r\n  --font-size: var(--t-default-font-size);\r\n  --height: 1.5rem;\r\n  --padding: calc((var(--height) - var(--t-default-font-size))/2);\r\n  background-color: var(--t-input-field-background-colour);\r\n  border-radius: 6px;\r\n  border: 1px solid var(--t-base-border-colour);\r\n  box-shadow: inset 1px 1px 1px rgba(0,0,0,0.3);\r\n  box-sizing: border-box;\r\n  color: var(--t-font-colour-default);\r\n  line-height: var(--font-size);\r\n  outline: none;\r\n  padding: var(--padding);\r\n  transition: var(--t-transition-duration-medium);\r\n}\r\n\r\n.text-input:focus {\r\n  transform: scale(1.05);\r\n  background-color: var(--t-page-background-colour);\r\n  box-shadow: color-mix(in oklab, var(--t-base-border-colour) 20%, transparent) 0 0 24px;\r\n}\r\n\r\n.text-input::selection {\r\n  background-color: var(--t-selection-background-colour);\r\n  color: var(--t-selection-font-colour);\r\n}\r\n","import { Component, EventEmitter, h, Prop, Event } from '@stencil/core';\r\nimport { ComponentHue } from '../../types/ComponentHue';\r\n\r\n@Component({\r\n  tag: 't-textfield',\r\n  styleUrls: ['t-textfield.css', '../../style/text-input.css'],\r\n  shadow: true,\r\n})\r\nexport class TTextfield {\r\n\r\n  @Prop() hue: ComponentHue = 0;\r\n  @Prop() label: string;\r\n  @Prop() value: string;\r\n\r\n  @Event() valueChange: EventEmitter<string>;\r\n\r\n  render() {\r\n    return <internal-style-provider hueOffsetInTurns={this.hue}>\r\n      <internal-input-wrapper>\r\n        <label htmlFor=\"input\" slot='label'>{this.label}</label>\r\n        <input\r\n          slot='input'\r\n          id=\"input\"\r\n          class=\"text-input\"\r\n          type=\"text\"\r\n          value={this.value}\r\n          onInput={(e) => {\r\n            this.valueChange.emit((e.target as HTMLInputElement).value);\r\n          }}\r\n        />\r\n      </internal-input-wrapper>\r\n    </internal-style-provider>;\r\n  }\r\n}\r\n"],"version":3}