{"version":3,"names":["tTreeCss","TTreeStyle0","TTree","getAllItems","customElements","whenDefined","this","element","querySelectorAll","getAllVisibleItems","items","Promise","all","Array","from","map","async","item","include","isVisible","filter","resetTabindex","allItems","setFocusable","getFocusableItems","focusableItems","isFocusable","push","componentDidLoad","makeFirstItemFocusable","then","length","render","additionalAttributes","label","labelId","h","Fragment","key","id","Object","assign","role","tTreeItemCss","TTreeItemStyle0","TTreeItem","isExpanded","expanded","isTopLevel","parent","parentElement","isParentVisible","linkOrButton","focusable","tagName","getLevel","parentLevel","focusOnLink","focusOnElement","getNextVisibleItem","root","getRoot","allVisibleItems","index","indexOf","nextIndex","getPreviousVisibleItem","previousIndex","getLastVisibleSubItem","visibleSubItems","getVisibleSubItems","hasChildren","subItems","subItem","getSubItems","closest","shadowRoot","querySelector","close","open","toggleExpanded","componentDidRender","level","style","setProperty","toString","handleKeyDown","event","preventDefault","handleArrowRight","handleArrowLeft","handleArrowUp","handleArrowDown","handleHome","handleEnd","moveFocusDown","moveFocusToParent","moveFocusUp","moveFocusToStart","moveFocusToEnd","previousItem","nextItem","firstItem","lastItem","handleClick","labelClick","emit","expandedClass","hasChildrenClass","class","title","renderLink","href","onElementClick","e","detail","onKeyDown","renderLabel","ChevronRightIcon","fill","onClick","handleArrowClick","stopPropagation"],"sources":["src/components/t-tree/t-tree.css?tag=t-tree&encapsulation=shadow","src/components/t-tree/t-tree.tsx","src/components/t-tree-item/t-tree-item.css?tag=t-tree-item&encapsulation=shadow","src/components/t-tree-item/t-tree-item.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\nul {\n  list-style-type: none;\n  padding-left: 0;\n  margin: 0 calc(-1 * var(--t-spacing-default));\n  padding-inline-start: 0;\n}\n\n#tree-label {\n  display: block;\n  font-weight: bolder;\n  margin-bottom: var(--t-spacing-in-group);\n}\n","import { Component, h, Method, Element, Fragment, Prop } from '@stencil/core';\n\n@Component({\n  tag: 't-tree',\n  styleUrl: 't-tree.css',\n  shadow: true,\n})\nexport class TTree {\n\n  @Element() element: HTMLElement;\n\n  @Prop() label?: string;\n\n  @Method() async getAllItems(): Promise<NodeListOf<HTMLTTreeItemElement>> {\n    await customElements.whenDefined('t-tree-item');\n    return this.element.querySelectorAll('t-tree-item');\n  }\n\n  @Method() async getAllVisibleItems(): Promise<HTMLTTreeItemElement[]> {\n    const items = await this.getAllItems();\n    return (await Promise.all(\n      Array\n        .from(items)\n        .map(async item => ({\n          include: await item.isVisible(),\n          item,\n        }))\n    )).filter(({ include }) => include).map(({ item }) => item);\n  }\n\n  @Method() async resetTabindex() {\n    const allItems = await this.getAllItems();\n    await Promise.all(\n      Array.from(allItems).map(async item => {\n        await item.setFocusable(false);\n      })\n    );\n  }\n\n  private async getFocusableItems(): Promise<HTMLTTreeItemElement[]> {\n    const items = await this.getAllItems();\n    const focusableItems: HTMLTTreeItemElement[] = [];\n    await Promise.all(\n      Array.from(items).map(async item => {\n        if (await item.isFocusable()) {\n          focusableItems.push(item);\n        }\n      })\n    );\n    return focusableItems;\n  }\n\n  componentDidLoad() {\n    return this.makeFirstItemFocusable();\n  }\n\n  @Method() async makeFirstItemFocusable() {\n    this.getAllVisibleItems().then(async items => {\n      if (items.length > 0) {\n        await this.resetTabindex();\n        await items[0].setFocusable(true);\n      }\n    });\n  }\n\n  render() {\n    const additionalAttributes = this.label ? { 'aria-labelledby': labelId } : {};\n    return (\n      <>\n        {this.label && <span id={labelId}>{this.label}</span>}\n        <ul role='tree' {...additionalAttributes}>\n          <slot></slot>\n        </ul>\n      </>\n    );\n  }\n}\n\nconst labelId = 'tree-label';\n",":host {\n  --level: 0; /* Set by JS */\n  --indent: calc(var(--level) * var(--t-spacing-default));\n  --line-left-padding: calc(var(--indent) + calc(var(--t-spacing-default) / 2));\n  --line-width: 1px;\n  --line-colour: color-mix(in oklab, var(--t-font-colour-default), transparent);\n  --line-start-position: calc(var(--line-left-padding));\n  --line-end-position: calc(var(--line-start-position) + var(--line-width));\n  --arrow-width: 1rem;\n}\n\nt-link::part(link), t-button::part(button) {\n  align-items: center;\n  border-radius: 0;\n  box-sizing: border-box;\n  display: flex;\n  gap: var(--t-spacing-inline);\n  padding: var(--t-spacing-in-group) var(--t-spacing-default) var(--t-spacing-in-group) var(--indent);\n  width: 100%;\n}\n\nt-link:not(:has(.arrow))::part(link), t-button:not(:has(.arrow))::part(button) {\n  padding-left: calc(var(--indent) + var(--t-spacing-inline) + var(--arrow-width));\n}\n\nt-link:hover::part(link), t-button:hover::part(button) {\n  background-color: color-mix(in oklab, transparent, var(--t-colour-base-app));\n}\n\nli {\n  box-sizing: border-box;\n\n  &.expanded {\n    .arrow {\n      rotate: 90deg;\n    }\n\n    .collapsible {\n      grid-template-rows: 1fr;\n    }\n  }\n\n  &.collapsed {\n    .arrow {\n      rotate: 0deg;\n    }\n\n    .collapsible {\n      grid-template-rows: 0fr;\n\n      ul {\n        visibility: hidden;\n        padding: 0;\n      }\n    }\n  }\n\n  .collapsible {\n    overflow: hidden;\n    display: grid;\n    grid-template-rows: 1fr; /* To make height transition work */\n    transition: grid-template-rows var(--t-transition-duration-medium);\n\n    ul {\n      min-height: 0;\n      transition: visibility 1s;\n    }\n  }\n\n  .arrow {\n    flex-basis: content;\n    width: var(--arrow-width);\n    transition: rotate var(--t-transition-duration-medium), scale var(--t-transition-duration-short);\n\n    &:hover {\n      scale: 1.5;\n    }\n  }\n\n  .label {\n    flex: 1;\n    text-align: left;\n  }\n}\n\nul {\n  box-sizing: border-box;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  padding-inline: 0;\n  background: linear-gradient(\n    to right,\n    transparent 0,\n    transparent var(--line-start-position),\n    var(--line-colour) var(--line-start-position),\n    var(--line-colour) var(--line-end-position),\n    transparent var(--line-end-position)\n  );\n}\n","import { Component, Element, h, Method, Prop, State, Fragment, Event, EventEmitter } from '@stencil/core';\nimport { CaretRightIcon } from '../../icons/CaretRightIcon';\nimport { TLinkOrButtonCustomEvent } from '../../components';\nimport { ChevronRightIcon } from '../../icons/ChevronRightIcon';\n\n@Component({\n  tag: 't-tree-item',\n  styleUrl: 't-tree-item.css',\n  shadow: true,\n})\nexport class TTreeItem {\n\n  @Element() element: HTMLTTreeItemElement;\n\n  @Prop() label: string;\n  @Prop() href: string | null = null;\n\n  @State() expanded = false;\n  @State() hasChildren: boolean = false;\n\n  @Event() labelClick: EventEmitter<MouseEvent>;\n\n  @Method() async isExpanded(): Promise<boolean> {\n    await customElements.whenDefined('t-tree-item');\n    return this.expanded;\n  }\n\n  @Method() async isVisible(): Promise<boolean> {\n    const isTopLevel = await this.isTopLevel();\n    if (isTopLevel) {\n      return true;\n    } else {\n      const parent = this.element.parentElement as HTMLTTreeItemElement;\n      const isParentVisible = await parent.isVisible();\n      if (!isParentVisible) return false;\n      return await parent.isExpanded();\n    }\n  }\n\n  @Method() async isFocusable(): Promise<boolean> {\n    await customElements.whenDefined('t-link-or-button');\n    return this.linkOrButton.focusable;\n  }\n\n  @Method() async isTopLevel(): Promise<boolean> {\n    await customElements.whenDefined('t-tree-item');\n    return this.element.parentElement.tagName === 'T-TREE';\n  }\n\n  @Method() async getLevel(): Promise<number> {\n    const isTopLevel = await this.isTopLevel();\n    if (isTopLevel) return 1;\n    const parent = this.element.parentElement as HTMLTTreeItemElement;\n    const parentLevel = await parent.getLevel();\n    return parentLevel + 1;\n  }\n\n  @Method() async focusOnLink() {\n    await Promise.all([\n      customElements.whenDefined('t-link-or-button'),\n      customElements.whenDefined('t-tree-item'),\n    ]);\n    await this.linkOrButton.focusOnElement();\n  }\n\n  @Method() async getNextVisibleItem(): Promise<HTMLTTreeItemElement | null> {\n    const root = await this.getRoot();\n    const allVisibleItems = await root.getAllVisibleItems();\n    const index = Array.from(allVisibleItems).indexOf(this.element);\n    const nextIndex = index + 1;\n    return allVisibleItems[nextIndex] || null;\n  }\n\n  @Method() async getPreviousVisibleItem(): Promise<HTMLTTreeItemElement | null> {\n    const root = await this.getRoot();\n    const allVisibleItems = await root.getAllVisibleItems();\n    const index = Array.from(allVisibleItems).indexOf(this.element);\n    const previousIndex = index - 1;\n    return allVisibleItems[previousIndex] || null;\n  }\n\n  @Method() async getLastVisibleSubItem(): Promise<HTMLTTreeItemElement | null> {\n    await customElements.whenDefined('t-tree-item');\n    const visibleSubItems = await this.getVisibleSubItems();\n    if (visibleSubItems.length > 0) {\n      return visibleSubItems[visibleSubItems.length - 1];\n    } else {\n      return null;\n    }\n  }\n\n  @Method() async getVisibleSubItems(): Promise<HTMLTTreeItemElement[]> {\n    await customElements.whenDefined('t-tree-item');\n    if (this.expanded && this.hasChildren) {\n      return Array\n        .from(this.subItems)\n        .filter(async (subItem) => await subItem.isVisible());\n    } else {\n      return [];\n    }\n  }\n\n  @Method() async getSubItems() {\n    await customElements.whenDefined('t-tree-item');\n    return this.subItems;\n  }\n\n  @Method() async setFocusable(focusable: boolean) {\n    await customElements.whenDefined('t-link-or-button');\n    return this.linkOrButton.focusable = focusable;\n  }\n\n  @Method() async getRoot(): Promise<HTMLTTreeElement> {\n    await customElements.whenDefined('t-tree');\n    return this.element.closest('t-tree');\n  }\n\n  get linkOrButton(): HTMLTLinkOrButtonElement {\n    return this.element.shadowRoot.querySelector('t-link-or-button');\n  }\n\n  get subItems(): NodeListOf<HTMLTTreeItemElement> {\n    return this.element.querySelectorAll('t-tree-item');\n  }\n\n  private close() {\n    this.expanded = false;\n  }\n\n  private open() {\n    this.expanded = true;\n  }\n\n  private toggleExpanded() {\n    this.expanded = !this.expanded;\n  }\n\n  componentDidRender() {\n    customElements.whenDefined('t-tree-item').then(() => {\n      this.hasChildren = this.element.querySelector('t-tree-item') !== null;\n      this.getLevel().then(level => {\n        this.element.style.setProperty('--level', level.toString());\n      });\n    });\n  }\n\n  private async handleKeyDown(event: KeyboardEvent) {\n    switch (event.key) {\n      case 'ArrowRight':\n        event.preventDefault();\n        await this.handleArrowRight();\n        break;\n      case 'ArrowLeft':\n        event.preventDefault();\n        await this.handleArrowLeft();\n        break;\n      case 'ArrowUp':\n        event.preventDefault();\n        await this.handleArrowUp();\n        break;\n      case 'ArrowDown':\n        event.preventDefault();\n        await this.handleArrowDown();\n        break;\n      case 'Home':\n        event.preventDefault();\n        await this.handleHome();\n        break;\n      case 'End':\n        event.preventDefault();\n        await this.handleEnd();\n        break;\n    }\n  }\n\n  private async handleArrowRight() {\n    if (this.hasChildren) {\n      if (this.expanded) {\n        await this.moveFocusDown();\n      } else {\n        this.open();\n      }\n    }\n  }\n\n  private async handleArrowLeft() {\n    if (this.hasChildren && this.expanded) {\n      this.close();\n    } else {\n      const isTopLevel = await this.isTopLevel();\n      if (!isTopLevel) await this.moveFocusToParent();\n    }\n  }\n\n  private async handleArrowUp() {\n    await this.moveFocusUp();\n  }\n\n  private async handleArrowDown() {\n    await this.moveFocusDown();\n  }\n\n  private async handleHome() {\n    await this.moveFocusToStart();\n  }\n\n  private async handleEnd() {\n    await this.moveFocusToEnd();\n  }\n\n  private async moveFocusUp() {\n    const previousItem = await this.getPreviousVisibleItem();\n    if (previousItem) {\n      await this.setFocusable(false);\n      await previousItem.setFocusable(true);\n      await previousItem.focusOnLink();\n    }\n  }\n\n  private async moveFocusDown() {\n    const nextItem = await this.getNextVisibleItem();\n    if (nextItem) {\n      await this.setFocusable(false);\n      await nextItem.setFocusable(true);\n      await nextItem.focusOnLink();\n    }\n  }\n\n  private async moveFocusToParent() {\n    const isTopLevel = await this.isTopLevel();\n    if (isTopLevel) return;\n    const parent = this.element.parentElement as HTMLTTreeItemElement;\n    await this.setFocusable(false);\n    await parent.setFocusable(true);\n    await parent.focusOnLink();\n  }\n\n  private async moveFocusToStart() {\n    const root = await this.getRoot();\n    const allVisibleItems = await root.getAllVisibleItems();\n    const firstItem = allVisibleItems[0];\n    await this.setFocusable(false);\n    await firstItem.setFocusable(true);\n    await firstItem.focusOnLink();\n  }\n\n  private async moveFocusToEnd() {\n    const root = await this.getRoot();\n    const allVisibleItems = await root.getAllVisibleItems();\n    const lastItem = allVisibleItems[allVisibleItems.length - 1];\n    await this.setFocusable(false);\n    await lastItem.setFocusable(true);\n    await lastItem.focusOnLink();\n  }\n\n  private async handleClick(event: MouseEvent) {\n    if (this.hasChildren) {\n      const root = await this.getRoot();\n      await root.resetTabindex();\n      await this.setFocusable(true);\n    }\n    this.labelClick.emit(event);\n  }\n\n  render() {\n    const expandedClass = this.expanded ? 'expanded' : 'collapsed';\n    const hasChildrenClass = this.hasChildren ? 'withChildren' : 'withoutChildren';\n    return (\n      <li\n        aria-expanded={this.expanded ? 'true' : 'false'}\n        class={expandedClass + ' ' + hasChildrenClass}\n        role='treeitem'\n        title={this.label}\n      >\n        {this.renderLink()}\n        {this.hasChildren && (\n          <div class='collapsible'>\n            <ul role='group'>\n              <slot></slot>\n            </ul>\n          </div>\n        )}\n      </li>\n    );\n  }\n\n  private renderLink() {\n    return (\n      <t-link-or-button\n        href={this.href}\n        onElementClick={(e: TLinkOrButtonCustomEvent<MouseEvent>) => this.handleClick(e.detail)}\n        onKeyDown={(e) => this.handleKeyDown(e)}\n      >\n        {this.renderLabel()}\n      </t-link-or-button>\n    );\n  }\n\n  private renderLabel() {\n    return (<>\n      {this.hasChildren && (\n        <ChevronRightIcon\n          class='arrow'\n          fill\n          onClick={(e) => this.handleArrowClick(e)}\n        />\n      )}\n      <span class='label'>{this.label}</span>\n    </>);\n  }\n\n  private handleArrowClick(event: MouseEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.toggleExpanded();\n  }\n}\n"],"mappings":"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","ignoreList":[]}