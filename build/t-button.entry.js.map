{"file":"t-button.entry.esm.js","mappings":";;AAAA,MAAM,UAAU,GAAG,8uCAA8uC;;MCSpvC,OAAO;;;mBAEU,CAAC;;oBAEN,SAAS;;IAEhC,MAAM;QACJ,OAAO,gFAAyB,gBAAgB,EAAE,IAAI,CAAC,GAAG,IACxD,6EAAQ,KAAK,EAAC,UAAU,EAAC,IAAI,EAAC,QAAQ,IAAK,IAAI,CAAC,gBAAgB,GAC7D,IAAI,CAAC,IAAI,IAAI,YAAM,KAAK,EAAC,MAAM,iBAAc,IAAI,IAAG,IAAI,CAAC,IAAI,CAAQ,EACtE,8DAAO,CACA,CACe,CAAC;KAC5B;;;;;;","names":[],"sources":["src/components/t-button/t-button.css?tag=t-button&encapsulation=shadow","src/components/t-button/t-button.tsx"],"sourcesContent":[".t-button {\r\n  --button-colour: var(--t-base-colour);\r\n  background: linear-gradient(\r\n    to top,\r\n    color-mix(in oklab, var(--button-colour) 90%, black),\r\n    var(--button-colour),\r\n    color-mix(in oklab, var(--button-colour) 90%, white)\r\n  );\r\n  box-shadow:\r\n    inset color-mix(in oklab, var(--button-colour) 75%, white) 0 1px,\r\n    inset color-mix(in oklab, var(--button-colour) 75%, black) 0 -1px,\r\n    color-mix(in oklab, white 30%, transparent) 0 1px 1px,\r\n    color-mix(in oklab, black 10%, transparent) 0 -1px 1px,\r\n    rgb(0 0 0 / 0.2) 0 -1px 1px;\r\n  align-items: center;\r\n  border-radius: 100px;\r\n  border: 0 solid var(--t-base-border-colour);\r\n  color: var(--t-font-colour-default);\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  font-size: 1rem;\r\n  gap: var(--t-spacing-inline);\r\n  line-height: 1;\r\n  padding: .5rem;\r\n  transition: box-shadow var(--transistion-duration);\r\n\r\n  .icon {\r\n    align-self: center;\r\n  }\r\n}\r\n\r\n.t-button:hover {\r\n  --button-colour: color-mix(in oklab, var(--t-base-colour) 75%, white);\r\n}\r\n\r\n.t-button:active {\r\n  --transistion-duration: 0s;\r\n  background: var(--button-colour);\r\n}\r\n\r\n* {\r\n  --t-base-colour-hue-offset: 180;\r\n}\r\n","import { Component, h, Prop, VNode } from '@stencil/core';\r\nimport { ComponentHue } from '../../types/ComponentHue';\r\nimport { ButtonAttributes } from '../../types/HTMLAttributes';\r\n\r\n@Component({\r\n  tag: 't-button',\r\n  styleUrl: 't-button.css',\r\n  shadow: true,\r\n})\r\nexport class TButton {\r\n\r\n  @Prop() hue: ComponentHue = 0;\r\n  @Prop() buttonAttributes: ButtonAttributes;\r\n  @Prop() icon?: VNode = undefined;\r\n\r\n  render() {\r\n    return <internal-style-provider hueOffsetInTurns={this.hue}>\r\n      <button class='t-button' type='button' {...this.buttonAttributes}>\r\n        {this.icon && <span class='icon' aria-hidden={true}>{this.icon}</span>}\r\n        <slot/>\r\n      </button>\r\n    </internal-style-provider>;\r\n  }\r\n}\r\n"],"version":3}